Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RealDiv
    End
    For
    Mul
    Comment
    DomEQ
    LSQPAREN
    Downto
    Bool
    RealMinus
    New
    Mutable
    Less
    Ref
    Match
    BSlash
    Do
    Begin
    Colon
    RPAREN
    Greater
    Type
    Else
    Bang
    Pow
    Func
    Not
    Comma
    True
    ASSIGN
    Mod
    Dim
    RealMul
    Then
    Of
    RealPlus
    GEQ
    Const_float
    While
    Rec
    Plus
    VBar
    LPAREN
    Constructor
    Div
    EQ
    Minus
    RSQPAREN
    Delete
    And
    False
    Semicolon
    To
    Int
    With
    Const_char
    Float
    AND
    Char
    LEQ
    Done
    Const_int
    In
    NOT
    Array
    OR
    Unit
    If

Grammar

Rule 0     S' -> statement
Rule 1     statement -> Let
Rule 2     statement -> Identifier
Rule 3     statement -> Equals
Rule 4     statement -> Const_str

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 
And                  : 
Array                : 
BSlash               : 
Bang                 : 
Begin                : 
Bool                 : 
Char                 : 
Colon                : 
Comma                : 
Comment              : 
Const_char           : 
Const_float          : 
Const_int            : 
Const_str            : 4
Constructor          : 
Delete               : 
Dim                  : 
Div                  : 
Do                   : 
DomEQ                : 
Done                 : 
Downto               : 
EQ                   : 
Else                 : 
End                  : 
Equals               : 3
False                : 
Float                : 
For                  : 
Func                 : 
GEQ                  : 
Greater              : 
Identifier           : 2
If                   : 
In                   : 
Int                  : 
LEQ                  : 
LPAREN               : 
LSQPAREN             : 
Less                 : 
Let                  : 1
Match                : 
Minus                : 
Mod                  : 
Mul                  : 
Mutable              : 
NOT                  : 
New                  : 
Not                  : 
OR                   : 
Of                   : 
Plus                 : 
Pow                  : 
RPAREN               : 
RSQPAREN             : 
RealDiv              : 
RealMinus            : 
RealMul              : 
RealPlus             : 
Rec                  : 
Ref                  : 
Semicolon            : 
Then                 : 
To                   : 
True                 : 
Type                 : 
Unit                 : 
VBar                 : 
While                : 
With                 : 
error                : 

Nonterminals, with rules where they appear

statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . Let
    (2) statement -> . Identifier
    (3) statement -> . Equals
    (4) statement -> . Const_str

    Let             shift and go to state 3
    Identifier      shift and go to state 2
    Equals          shift and go to state 4
    Const_str       shift and go to state 1

    statement                      shift and go to state 5

state 1

    (4) statement -> Const_str .

    $end            reduce using rule 4 (statement -> Const_str .)


state 2

    (2) statement -> Identifier .

    $end            reduce using rule 2 (statement -> Identifier .)


state 3

    (1) statement -> Let .

    $end            reduce using rule 1 (statement -> Let .)


state 4

    (3) statement -> Equals .

    $end            reduce using rule 3 (statement -> Equals .)


state 5

    (0) S' -> statement .


