# lextab.py. This file automatically created by PLY (version 3.4). Don't edit!
_tabversion   = '3.4'
_lextokens    = {'RealDiv': 1, 'End': 1, 'For': 1, 'Dim': 1, 'DomEQ': 1, 'LSQPAREN': 1, 'To': 1, 'Bool': 1, 'RealMinus': 1, 'Const_float': 1, 'Mul': 1, 'Type': 1, 'Match': 1, 'BSlash': 1, 'Do': 1, 'GEQ': 1, 'RPAREN': 1, 'Greater': 1, 'Ref': 1, 'With': 1, 'Equals': 1, 'Else': 1, 'Bang': 1, 'Let': 1, 'Func': 1, 'Of': 1, 'Rec': 1, 'Comma': 1, 'MlComment': 1, 'New': 1, 'ASSIGN': 1, 'Mod': 1, 'Mutable': 1, 'Comment': 1, 'Not': 1, 'Then': 1, 'Done': 1, 'In': 1, 'RealPlus': 1, 'Begin': 1, 'Const_str': 1, 'While': 1, 'True': 1, 'Plus': 1, 'VBar': 1, 'LPAREN': 1, 'Constructor': 1, 'literals': 1, 'Div': 1, 'Identifier': 1, 'EQ': 1, 'Minus': 1, 'RSQPAREN': 1, 'Delete': 1, 'AND': 1, 'False': 1, 'Semicolon': 1, 'Less': 1, 'Int': 1, 'RealMul': 1, 'Const_char': 1, 'Float': 1, 'Downto': 1, 'Char': 1, 'LEQ': 1, 'Colon': 1, 'Const_int': 1, 'Pow': 1, 'NOT': 1, 'Array': 1, 'OR': 1, 'Unit': 1, 'If': 1}
_lexreflags   = 0
_lexliterals  = '+-*/=()|;!<>[],:'
_lexstateinfo = {'INITIAL': 'inclusive', 'mlcomment': 'exclusive'}
_lexstatere   = {'INITIAL': [('(?P<t_mlcomment>\\(\\*)|(?P<t_Reserved>[a-z][a-zA-Z0-9_]*)|(?P<t_newline>\\n+)|(?P<t_Const_char>\\\'(\\\\[nrt0\\\\\\"\\\']|\\\\x[0-9a-fA-F]{2}|[^\\\'\\"\\\\])\\\')|(?P<t_Const_float>[0-9]+\\.?[0-9]+([eE][+-]?[0-9]+)?)|(?P<t_Const_str>\\"([^\\\\\\n]|(\\\\.))*?\\")|(?P<t_Constructor>[A-Z][a-zA-Z0-9_]*)|(?P<t_Const_int>[0-9]+)|(?P<t_RealMinus>\xe2\x88\x92\\.)|(?P<t_RealMul>\\*\\.)|(?P<t_ignore_Comment>--.*)|(?P<t_RealPlus>\\+\\.)|(?P<t_OR>\\|\\|)|(?P<t_Pow>\\*\\*)|(?P<t_RealDiv>/\\.)|(?P<t_Func>->)|(?P<t_NOT>!=)|(?P<t_ASSIGN>:=)|(?P<t_AND>&&)|(?P<t_LEQ><=)|(?P<t_GEQ>>=)|(?P<t_EQ>==)|(?P<t_DomEQ><>)', [None, ('t_mlcomment', 'mlcomment'), ('t_Reserved', 'Reserved'), ('t_newline', 'newline'), (None, 'Const_char'), None, (None, 'Const_float'), None, (None, 'Const_str'), None, None, (None, 'Constructor'), (None, 'Const_int'), (None, 'RealMinus'), (None, 'RealMul'), (None, None), (None, 'RealPlus'), (None, 'OR'), (None, 'Pow'), (None, 'RealDiv'), (None, 'Func'), (None, 'NOT'), (None, 'ASSIGN'), (None, 'AND'), (None, 'LEQ'), (None, 'GEQ'), (None, 'EQ'), (None, 'DomEQ')])], 'mlcomment': [('(?P<t_mlcomment_start>\\(\\*)|(?P<t_mlcomment_end>\\*\\))|(?P<t_mlcomment_anydata>.+)|(?P<t_mlcomment_newline>\\n+)', [None, ('t_mlcomment_start', 'start'), ('t_mlcomment_end', 'end'), ('t_mlcomment_anydata', 'anydata'), ('t_mlcomment_newline', 'newline')])]}
_lexstateignore = {'INITIAL': ' \t', 'mlcomment': ' \t'}
_lexstateerrorf = {'INITIAL': 't_error', 'mlcomment': 't_mlcomment_error'}
